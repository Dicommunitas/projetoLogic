// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.controller.thymeleaf;

import br.com.projetologic.controller.thymeleaf.ViagensCollectionThymeleafController;
import br.com.projetologic.controller.thymeleaf.ViagensCollectionThymeleafLinkFactory;
import br.com.projetologic.controller.thymeleaf.ViagensItemProdutosDevolvidosThymeleafController;
import br.com.projetologic.model.ProdutoDevolvido;
import br.com.projetologic.model.Viagem;
import br.com.projetologic.service.api.ProdutoDevolvidoService;
import br.com.projetologic.service.api.ViagemService;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect ViagensItemProdutosDevolvidosThymeleafController_Roo_Thymeleaf {
    
    declare @type: ViagensItemProdutosDevolvidosThymeleafController: @Controller;
    
    declare @type: ViagensItemProdutosDevolvidosThymeleafController: @RequestMapping(value = "/viagens/{viagem}/produtosDevolvidos", name = "ViagensItemProdutosDevolvidosThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ViagemService ViagensItemProdutosDevolvidosThymeleafController.viagemService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ProdutoDevolvidoService ViagensItemProdutosDevolvidosThymeleafController.produtoDevolvidoService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource ViagensItemProdutosDevolvidosThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<ViagensCollectionThymeleafController> ViagensItemProdutosDevolvidosThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService ViagensItemProdutosDevolvidosThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param viagemService
     * @param produtoDevolvidoService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public ViagensItemProdutosDevolvidosThymeleafController.new(ViagemService viagemService, ProdutoDevolvidoService produtoDevolvidoService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setViagemService(viagemService);
        setProdutoDevolvidoService(produtoDevolvidoService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(ViagensCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ViagemService
     */
    public ViagemService ViagensItemProdutosDevolvidosThymeleafController.getViagemService() {
        return viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagemService
     */
    public void ViagensItemProdutosDevolvidosThymeleafController.setViagemService(ViagemService viagemService) {
        this.viagemService = viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ProdutoDevolvidoService
     */
    public ProdutoDevolvidoService ViagensItemProdutosDevolvidosThymeleafController.getProdutoDevolvidoService() {
        return produtoDevolvidoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param produtoDevolvidoService
     */
    public void ViagensItemProdutosDevolvidosThymeleafController.setProdutoDevolvidoService(ProdutoDevolvidoService produtoDevolvidoService) {
        this.produtoDevolvidoService = produtoDevolvidoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource ViagensItemProdutosDevolvidosThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void ViagensItemProdutosDevolvidosThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<ViagensCollectionThymeleafController> ViagensItemProdutosDevolvidosThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void ViagensItemProdutosDevolvidosThymeleafController.setCollectionLink(MethodLinkBuilderFactory<ViagensCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService ViagensItemProdutosDevolvidosThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void ViagensItemProdutosDevolvidosThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Viagem
     */
    @ModelAttribute
    public Viagem ViagensItemProdutosDevolvidosThymeleafController.getViagem(@PathVariable("viagem") Long id, Locale locale, HttpMethod method) {
        Viagem viagem = null;
        if (HttpMethod.PUT.equals(method)) {
            viagem = viagemService.findOneForUpdate(id);
        } else {
            viagem = viagemService.findOne(id);
        }
        
        if (viagem == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Viagem", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return viagem;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void ViagensItemProdutosDevolvidosThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("createdDate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        model.addAttribute("modifiedDate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void ViagensItemProdutosDevolvidosThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagem
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<ProdutoDevolvido>> ViagensItemProdutosDevolvidosThymeleafController.datatables(@ModelAttribute Viagem viagem, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<ProdutoDevolvido> produtosDevolvidos = getProdutoDevolvidoService().findByViagem(viagem, search, pageable);
        long totalProdutosDevolvidosCount = getProdutoDevolvidoService().countByViagem(viagem);
        ConvertedDatatablesData<ProdutoDevolvido> data =  new ConvertedDatatablesData<ProdutoDevolvido>(produtosDevolvidos, totalProdutosDevolvidosCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<ProdutoDevolvido>> ViagensItemProdutosDevolvidosThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<ProdutoDevolvido> produtosDevolvidos = getProdutoDevolvidoService().findAllByIdsIn(ids, search, pageable);
        long totalProdutosDevolvidosCount = produtosDevolvidos.getTotalElements();
        ConvertedDatatablesData<ProdutoDevolvido> data =  new ConvertedDatatablesData<ProdutoDevolvido>(produtosDevolvidos, totalProdutosDevolvidosCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagem
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView ViagensItemProdutosDevolvidosThymeleafController.createForm(@ModelAttribute Viagem viagem, Model model) {
        populateForm(model);
        model.addAttribute("produtoDevolvido", new ProdutoDevolvido());
        return new ModelAndView("viagens/produtosDevolvidos/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagem
     * @param produtosDevolvidosToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromProdutosDevolvidos", value = "/{produtosDevolvidosToRemove}")
    @ResponseBody
    public ResponseEntity<?> ViagensItemProdutosDevolvidosThymeleafController.removeFromProdutosDevolvidos(@ModelAttribute Viagem viagem, @PathVariable("produtosDevolvidosToRemove") Long produtosDevolvidosToRemove) {
        getViagemService().removeFromProdutosDevolvidos(viagem,Collections.singleton(produtosDevolvidosToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagem
     * @param produtosDevolvidosToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromProdutosDevolvidosBatch", value = "/batch/{produtosDevolvidosToRemove}")
    @ResponseBody
    public ResponseEntity<?> ViagensItemProdutosDevolvidosThymeleafController.removeFromProdutosDevolvidosBatch(@ModelAttribute Viagem viagem, @PathVariable("produtosDevolvidosToRemove") Collection<Long> produtosDevolvidosToRemove) {
        getViagemService().removeFromProdutosDevolvidos(viagem, produtosDevolvidosToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagem
     * @param produtosDevolvidos
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView ViagensItemProdutosDevolvidosThymeleafController.create(@ModelAttribute Viagem viagem, @RequestParam(value = "produtosDevolvidosIds", required = false) List<Long> produtosDevolvidos, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (produtosDevolvidos != null) {
            for (Iterator<Long> iterator = produtosDevolvidos.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, viagem.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (produtosDevolvidos != null) {
                viagem.setProdutosDevolvidos(new HashSet<ProdutoDevolvido>(getProdutoDevolvidoService().findAll(produtosDevolvidos)));
            }else{
                viagem.setProdutosDevolvidos(new HashSet<ProdutoDevolvido>());
            }
            // Reset the version to prevent update
             viagem.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("viagem", viagem);
            model.addAttribute("concurrency", true);
            return new ModelAndView("viagens/produtosDevolvidos/create");
        }else if(!Objects.equals(version, viagem.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("viagem", viagem);
            model.addAttribute("concurrency", false);
            return new ModelAndView("viagens/produtosDevolvidos/create");
        }
        getViagemService().setProdutosDevolvidos(viagem,produtosDevolvidos);
        return new ModelAndView("redirect:" + getCollectionLink().to(ViagensCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
