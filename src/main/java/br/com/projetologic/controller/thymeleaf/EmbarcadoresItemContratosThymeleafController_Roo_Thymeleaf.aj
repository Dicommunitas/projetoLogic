// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.controller.thymeleaf;

import br.com.projetologic.controller.thymeleaf.EmbarcadoresCollectionThymeleafController;
import br.com.projetologic.controller.thymeleaf.EmbarcadoresCollectionThymeleafLinkFactory;
import br.com.projetologic.controller.thymeleaf.EmbarcadoresItemContratosThymeleafController;
import br.com.projetologic.model.Contrato;
import br.com.projetologic.model.Embarcador;
import br.com.projetologic.service.api.ContratoService;
import br.com.projetologic.service.api.EmbarcadorService;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect EmbarcadoresItemContratosThymeleafController_Roo_Thymeleaf {
    
    declare @type: EmbarcadoresItemContratosThymeleafController: @Controller;
    
    declare @type: EmbarcadoresItemContratosThymeleafController: @RequestMapping(value = "/embarcadores/{embarcador}/contratos", name = "EmbarcadoresItemContratosThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private EmbarcadorService EmbarcadoresItemContratosThymeleafController.embarcadorService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ContratoService EmbarcadoresItemContratosThymeleafController.contratoService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource EmbarcadoresItemContratosThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<EmbarcadoresCollectionThymeleafController> EmbarcadoresItemContratosThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService EmbarcadoresItemContratosThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param embarcadorService
     * @param contratoService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public EmbarcadoresItemContratosThymeleafController.new(EmbarcadorService embarcadorService, ContratoService contratoService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setEmbarcadorService(embarcadorService);
        setContratoService(contratoService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(EmbarcadoresCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return EmbarcadorService
     */
    public EmbarcadorService EmbarcadoresItemContratosThymeleafController.getEmbarcadorService() {
        return embarcadorService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcadorService
     */
    public void EmbarcadoresItemContratosThymeleafController.setEmbarcadorService(EmbarcadorService embarcadorService) {
        this.embarcadorService = embarcadorService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ContratoService
     */
    public ContratoService EmbarcadoresItemContratosThymeleafController.getContratoService() {
        return contratoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contratoService
     */
    public void EmbarcadoresItemContratosThymeleafController.setContratoService(ContratoService contratoService) {
        this.contratoService = contratoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource EmbarcadoresItemContratosThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void EmbarcadoresItemContratosThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<EmbarcadoresCollectionThymeleafController> EmbarcadoresItemContratosThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void EmbarcadoresItemContratosThymeleafController.setCollectionLink(MethodLinkBuilderFactory<EmbarcadoresCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService EmbarcadoresItemContratosThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void EmbarcadoresItemContratosThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Embarcador
     */
    @ModelAttribute
    public Embarcador EmbarcadoresItemContratosThymeleafController.getEmbarcador(@PathVariable("embarcador") Long id, Locale locale, HttpMethod method) {
        Embarcador embarcador = null;
        if (HttpMethod.PUT.equals(method)) {
            embarcador = embarcadorService.findOneForUpdate(id);
        } else {
            embarcador = embarcadorService.findOne(id);
        }
        
        if (embarcador == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Embarcador", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return embarcador;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void EmbarcadoresItemContratosThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("vigenciaInicio_date_format", "dd/MM/yyyy - HH:mm");
        model.addAttribute("vigenciaFim_date_format", "dd/MM/yyyy - HH:mm");
        model.addAttribute("createdDate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        model.addAttribute("modifiedDate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void EmbarcadoresItemContratosThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contratante
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Contrato>> EmbarcadoresItemContratosThymeleafController.datatables(@ModelAttribute Embarcador contratante, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Contrato> contratos = getContratoService().findByContratante(contratante, search, pageable);
        long totalContratosCount = getContratoService().countByContratante(contratante);
        ConvertedDatatablesData<Contrato> data =  new ConvertedDatatablesData<Contrato>(contratos, totalContratosCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Contrato>> EmbarcadoresItemContratosThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Contrato> contratos = getContratoService().findAllByIdsIn(ids, search, pageable);
        long totalContratosCount = contratos.getTotalElements();
        ConvertedDatatablesData<Contrato> data =  new ConvertedDatatablesData<Contrato>(contratos, totalContratosCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView EmbarcadoresItemContratosThymeleafController.createForm(@ModelAttribute Embarcador embarcador, Model model) {
        populateForm(model);
        model.addAttribute("contrato", new Contrato());
        return new ModelAndView("embarcadores/contratos/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param contratosToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromContratos", value = "/{contratosToRemove}")
    @ResponseBody
    public ResponseEntity<?> EmbarcadoresItemContratosThymeleafController.removeFromContratos(@ModelAttribute Embarcador embarcador, @PathVariable("contratosToRemove") Long contratosToRemove) {
        getEmbarcadorService().removeFromContratos(embarcador,Collections.singleton(contratosToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param contratosToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromContratosBatch", value = "/batch/{contratosToRemove}")
    @ResponseBody
    public ResponseEntity<?> EmbarcadoresItemContratosThymeleafController.removeFromContratosBatch(@ModelAttribute Embarcador embarcador, @PathVariable("contratosToRemove") Collection<Long> contratosToRemove) {
        getEmbarcadorService().removeFromContratos(embarcador, contratosToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param contratos
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView EmbarcadoresItemContratosThymeleafController.create(@ModelAttribute Embarcador embarcador, @RequestParam(value = "contratosIds", required = false) List<Long> contratos, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (contratos != null) {
            for (Iterator<Long> iterator = contratos.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(!Objects.equals(version, embarcador.getVersion()) && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (contratos != null) {
                embarcador.setContratos(new HashSet<Contrato>(getContratoService().findAll(contratos)));
            }else{
                embarcador.setContratos(new HashSet<Contrato>());
            }
            // Reset the version to prevent update
             embarcador.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("embarcador", embarcador);
            model.addAttribute("concurrency", true);
            return new ModelAndView("embarcadores/contratos/create");
        }else if(!Objects.equals(version, embarcador.getVersion()) && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("embarcador", embarcador);
            model.addAttribute("concurrency", false);
            return new ModelAndView("embarcadores/contratos/create");
        }
        getEmbarcadorService().setContratos(embarcador,contratos);
        return new ModelAndView("redirect:" + getCollectionLink().to(EmbarcadoresCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
