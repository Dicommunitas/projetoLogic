// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.controller.json;

import br.com.projetologic.controller.json.ContratosItemJsonController;
import br.com.projetologic.model.Contrato;
import br.com.projetologic.service.api.ContratoService;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect ContratosItemJsonController_Roo_JSON {
    
    declare @type: ContratosItemJsonController: @RestController;
    
    declare @type: ContratosItemJsonController: @RequestMapping(value = "/contratos/{contrato}", name = "ContratosItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ContratoService ContratosItemJsonController.contratoService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param contratoService
     */
    @Autowired
    public ContratosItemJsonController.new(ContratoService contratoService) {
        this.contratoService = contratoService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ContratoService
     */
    public ContratoService ContratosItemJsonController.getContratoService() {
        return contratoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contratoService
     */
    public void ContratosItemJsonController.setContratoService(ContratoService contratoService) {
        this.contratoService = contratoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Contrato
     */
    @ModelAttribute
    public Contrato ContratosItemJsonController.getContrato(@PathVariable("contrato") Long id) {
        Contrato contrato = contratoService.findOne(id);
        if (contrato == null) {
            throw new NotFoundException(String.format("Contrato with identifier '%s' not found",id));
        }
        return contrato;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contrato
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> ContratosItemJsonController.show(@ModelAttribute Contrato contrato) {
        return ResponseEntity.ok(contrato);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contrato
     * @return UriComponents
     */
    public static UriComponents ContratosItemJsonController.showURI(Contrato contrato) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(ContratosItemJsonController.class).show(contrato))
            .buildAndExpand(contrato.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedContrato
     * @param contrato
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> ContratosItemJsonController.update(@ModelAttribute Contrato storedContrato, @Valid @RequestBody Contrato contrato, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        contrato.setId(storedContrato.getId());
        getContratoService().save(contrato);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contrato
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> ContratosItemJsonController.delete(@ModelAttribute Contrato contrato) {
        getContratoService().delete(contrato);
        return ResponseEntity.ok().build();
    }
    
}
