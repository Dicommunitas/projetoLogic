// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.controller.json;

import br.com.projetologic.controller.json.EmbarcadoresItemJsonController;
import br.com.projetologic.model.Embarcador;
import br.com.projetologic.service.api.EmbarcadorService;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect EmbarcadoresItemJsonController_Roo_JSON {
    
    declare @type: EmbarcadoresItemJsonController: @RestController;
    
    declare @type: EmbarcadoresItemJsonController: @RequestMapping(value = "/embarcadores/{embarcador}", name = "EmbarcadoresItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private EmbarcadorService EmbarcadoresItemJsonController.embarcadorService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param embarcadorService
     */
    @Autowired
    public EmbarcadoresItemJsonController.new(EmbarcadorService embarcadorService) {
        this.embarcadorService = embarcadorService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return EmbarcadorService
     */
    public EmbarcadorService EmbarcadoresItemJsonController.getEmbarcadorService() {
        return embarcadorService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcadorService
     */
    public void EmbarcadoresItemJsonController.setEmbarcadorService(EmbarcadorService embarcadorService) {
        this.embarcadorService = embarcadorService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Embarcador
     */
    @ModelAttribute
    public Embarcador EmbarcadoresItemJsonController.getEmbarcador(@PathVariable("embarcador") Long id) {
        Embarcador embarcador = embarcadorService.findOne(id);
        if (embarcador == null) {
            throw new NotFoundException(String.format("Embarcador with identifier '%s' not found",id));
        }
        return embarcador;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> EmbarcadoresItemJsonController.show(@ModelAttribute Embarcador embarcador) {
        return ResponseEntity.ok(embarcador);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @return UriComponents
     */
    public static UriComponents EmbarcadoresItemJsonController.showURI(Embarcador embarcador) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(EmbarcadoresItemJsonController.class).show(embarcador))
            .buildAndExpand(embarcador.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedEmbarcador
     * @param embarcador
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> EmbarcadoresItemJsonController.update(@ModelAttribute Embarcador storedEmbarcador, @Valid @RequestBody Embarcador embarcador, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        embarcador.setId(storedEmbarcador.getId());
        getEmbarcadorService().save(embarcador);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> EmbarcadoresItemJsonController.delete(@ModelAttribute Embarcador embarcador) {
        getEmbarcadorService().delete(embarcador);
        return ResponseEntity.ok().build();
    }
    
}
