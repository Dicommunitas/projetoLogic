// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.controller.json;

import br.com.projetologic.controller.json.MotoristasItemJsonController;
import br.com.projetologic.model.Motorista;
import br.com.projetologic.service.api.MotoristaService;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect MotoristasItemJsonController_Roo_JSON {
    
    declare @type: MotoristasItemJsonController: @RestController;
    
    declare @type: MotoristasItemJsonController: @RequestMapping(value = "/motoristas/{motorista}", name = "MotoristasItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MotoristaService MotoristasItemJsonController.motoristaService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param motoristaService
     */
    @Autowired
    public MotoristasItemJsonController.new(MotoristaService motoristaService) {
        this.motoristaService = motoristaService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MotoristaService
     */
    public MotoristaService MotoristasItemJsonController.getMotoristaService() {
        return motoristaService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motoristaService
     */
    public void MotoristasItemJsonController.setMotoristaService(MotoristaService motoristaService) {
        this.motoristaService = motoristaService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Motorista
     */
    @ModelAttribute
    public Motorista MotoristasItemJsonController.getMotorista(@PathVariable("motorista") Long id) {
        Motorista motorista = motoristaService.findOne(id);
        if (motorista == null) {
            throw new NotFoundException(String.format("Motorista with identifier '%s' not found",id));
        }
        return motorista;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motorista
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> MotoristasItemJsonController.show(@ModelAttribute Motorista motorista) {
        return ResponseEntity.ok(motorista);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motorista
     * @return UriComponents
     */
    public static UriComponents MotoristasItemJsonController.showURI(Motorista motorista) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(MotoristasItemJsonController.class).show(motorista))
            .buildAndExpand(motorista.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedMotorista
     * @param motorista
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> MotoristasItemJsonController.update(@ModelAttribute Motorista storedMotorista, @Valid @RequestBody Motorista motorista, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        motorista.setId(storedMotorista.getId());
        getMotoristaService().save(motorista);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motorista
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> MotoristasItemJsonController.delete(@ModelAttribute Motorista motorista) {
        getMotoristaService().delete(motorista);
        return ResponseEntity.ok().build();
    }
    
}
