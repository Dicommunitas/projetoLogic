// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.repository;

import br.com.projetologic.model.Cidade;
import br.com.projetologic.model.Cliente;
import br.com.projetologic.model.Embarcador;
import br.com.projetologic.model.MotivoNegativaDescarga;
import br.com.projetologic.model.MotivoNegativaDiaria;
import br.com.projetologic.model.MotivoPerdaAgenda;
import br.com.projetologic.model.Motorista;
import br.com.projetologic.model.QViagem;
import br.com.projetologic.model.Usuario;
import br.com.projetologic.model.Veiculo;
import br.com.projetologic.model.Viagem;
import br.com.projetologic.repository.ViagemRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ViagemRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ViagemRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.EMBARCADOR = "embarcador";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CIDADE_ORIGEM = "cidadeOrigem";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.DATA_LANCAMENTO = "dataLancamento";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.IDENTIFICACAO_TRANSPORTE = "identificacaoTransporte";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.DESTINO = "destino";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.AGENDA = "agenda";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.MOTORISTA = "motorista";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CAVALO = "cavalo";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CARRETA_1 = "carreta1";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CARRETA_2 = "carreta2";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.INICIO_ESTIMADO = "inicioEstimado";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.USUARIO_EXPEDICAO = "usuarioExpedicao";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.INICIO_REAL = "inicioReal";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.STATUS_VIAGEM = "statusViagem";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.HORA_PARADA_POSTO_FISCAL = "horaParadaPostoFiscal";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.HORA_SAIDA_POSTO_FISCAL = "horaSaidaPostoFiscal";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CHEGADA_CLIENTE = "chegadaCliente";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.MOTIVO_PERDA_AGENDA = "motivoPerdaAgenda";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.INICIO_DESCARGA = "inicioDescarga";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.FIM_DESCARGA = "fimDescarga";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.FIM_VIAGEM = "fimViagem";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.DESPESA_DESCARGA = "despesaDescarga";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.STATUS_CUSTO_DESCARGA = "statusCustoDescarga";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.MOTIVO_NEGATIVA_DESCARGA = "motivoNegativaDescarga";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.STATUS_DIARIA = "statusDiaria";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.MOTIVO_NEGATIVA_DIARIA = "motivoNegativaDiaria";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.DEVOLUCAO = "devolucao";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.OBSERVACAO_CALL_CENTER = "observacaoCallCenter";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.USUARIO_CALL_CENTER = "usuarioCallCenter";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CHEGADA_LOGISTICA_REVERSA = "chegadaLogisticaReversa";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.AGENDA_REVERSA = "agendaReversa";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.MOTORISTA_REVERSA = "motoristaReversa";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CAVALO_REVERSA = "cavaloReversa";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CARRETA_REVERSA_1 = "carretaReversa1";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CARRETA_REVERSA_2 = "carretaReversa2";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.FIM_LOGISTICA_REVERSA = "fimLogisticaReversa";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.OBSERVACAO_REVERSA = "observacaoReversa";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.USUARIO_LOGISTICA_REVERSA = "usuarioLogisticaReversa";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ViagemRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(viagem.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carreta1
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByCarreta1(Veiculo carreta1, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(carreta1, "carreta1 is required");
        
        query.where(viagem.carreta1.eq(carreta1));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carreta2
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByCarreta2(Veiculo carreta2, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(carreta2, "carreta2 is required");
        
        query.where(viagem.carreta2.eq(carreta2));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carretaReversa1
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByCarretaReversa1(Veiculo carretaReversa1, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(carretaReversa1, "carretaReversa1 is required");
        
        query.where(viagem.carretaReversa1.eq(carretaReversa1));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carretaReversa2
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByCarretaReversa2(Veiculo carretaReversa2, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(carretaReversa2, "carretaReversa2 is required");
        
        query.where(viagem.carretaReversa2.eq(carretaReversa2));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cavalo
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByCavalo(Veiculo cavalo, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(cavalo, "cavalo is required");
        
        query.where(viagem.cavalo.eq(cavalo));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cavaloReversa
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByCavaloReversa(Veiculo cavaloReversa, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(cavaloReversa, "cavaloReversa is required");
        
        query.where(viagem.cavaloReversa.eq(cavaloReversa));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cidadeOrigem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByCidadeOrigem(Cidade cidadeOrigem, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(cidadeOrigem, "cidadeOrigem is required");
        
        query.where(viagem.cidadeOrigem.eq(cidadeOrigem));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param destino
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByDestino(Cliente destino, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(destino, "destino is required");
        
        query.where(viagem.destino.eq(destino));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByEmbarcador(Embarcador embarcador, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(embarcador, "embarcador is required");
        
        query.where(viagem.embarcador.eq(embarcador));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDescarga
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByMotivoNegativaDescarga(MotivoNegativaDescarga motivoNegativaDescarga, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(motivoNegativaDescarga, "motivoNegativaDescarga is required");
        
        query.where(viagem.motivoNegativaDescarga.eq(motivoNegativaDescarga));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDiaria
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByMotivoNegativaDiaria(MotivoNegativaDiaria motivoNegativaDiaria, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(motivoNegativaDiaria, "motivoNegativaDiaria is required");
        
        query.where(viagem.motivoNegativaDiaria.eq(motivoNegativaDiaria));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoPerdaAgenda
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByMotivoPerdaAgenda(MotivoPerdaAgenda motivoPerdaAgenda, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(motivoPerdaAgenda, "motivoPerdaAgenda is required");
        
        query.where(viagem.motivoPerdaAgenda.eq(motivoPerdaAgenda));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motorista
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByMotorista(Motorista motorista, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(motorista, "motorista is required");
        
        query.where(viagem.motorista.eq(motorista));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioCallCenter
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByUsuarioCallCenter(Usuario usuarioCallCenter, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(usuarioCallCenter, "usuarioCallCenter is required");
        
        query.where(viagem.usuarioCallCenter.eq(usuarioCallCenter));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioExpedicao
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByUsuarioExpedicao(Usuario usuarioExpedicao, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(usuarioExpedicao, "usuarioExpedicao is required");
        
        query.where(viagem.usuarioExpedicao.eq(usuarioExpedicao));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioLogisticaReversa
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemRepositoryImpl.findByUsuarioLogisticaReversa(Usuario usuarioLogisticaReversa, GlobalSearch globalSearch, Pageable pageable) {
        
        QViagem viagem = QViagem.viagem;
        
        JPQLQuery<Viagem> query = from(viagem);
        
        Assert.notNull(usuarioLogisticaReversa, "usuarioLogisticaReversa is required");
        
        query.where(viagem.usuarioLogisticaReversa.eq(usuarioLogisticaReversa));
        Path<?>[] paths = new Path<?>[] {viagem.embarcador,viagem.cidadeOrigem,viagem.dataLancamento,viagem.identificacaoTransporte,viagem.destino,viagem.agenda,viagem.motorista,viagem.cavalo,viagem.carreta1,viagem.carreta2,viagem.inicioEstimado,viagem.usuarioExpedicao,viagem.inicioReal,viagem.statusViagem,viagem.horaParadaPostoFiscal,viagem.horaSaidaPostoFiscal,viagem.chegadaCliente,viagem.motivoPerdaAgenda,viagem.inicioDescarga,viagem.fimDescarga,viagem.fimViagem,viagem.despesaDescarga,viagem.statusCustoDescarga,viagem.motivoNegativaDescarga,viagem.statusDiaria,viagem.motivoNegativaDiaria,viagem.devolucao,viagem.observacaoCallCenter,viagem.usuarioCallCenter,viagem.chegadaLogisticaReversa,viagem.agendaReversa,viagem.motoristaReversa,viagem.cavaloReversa,viagem.carretaReversa1,viagem.carretaReversa2,viagem.fimLogisticaReversa,viagem.observacaoReversa,viagem.usuarioLogisticaReversa,viagem.modifiedBy,viagem.createdDate,viagem.createdBy,viagem.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(EMBARCADOR, viagem.embarcador)
			.map(CIDADE_ORIGEM, viagem.cidadeOrigem)
			.map(DATA_LANCAMENTO, viagem.dataLancamento)
			.map(IDENTIFICACAO_TRANSPORTE, viagem.identificacaoTransporte)
			.map(DESTINO, viagem.destino)
			.map(AGENDA, viagem.agenda)
			.map(MOTORISTA, viagem.motorista)
			.map(CAVALO, viagem.cavalo)
			.map(CARRETA_1, viagem.carreta1)
			.map(CARRETA_2, viagem.carreta2)
			.map(INICIO_ESTIMADO, viagem.inicioEstimado)
			.map(USUARIO_EXPEDICAO, viagem.usuarioExpedicao)
			.map(INICIO_REAL, viagem.inicioReal)
			.map(STATUS_VIAGEM, viagem.statusViagem)
			.map(HORA_PARADA_POSTO_FISCAL, viagem.horaParadaPostoFiscal)
			.map(HORA_SAIDA_POSTO_FISCAL, viagem.horaSaidaPostoFiscal)
			.map(CHEGADA_CLIENTE, viagem.chegadaCliente)
			.map(MOTIVO_PERDA_AGENDA, viagem.motivoPerdaAgenda)
			.map(INICIO_DESCARGA, viagem.inicioDescarga)
			.map(FIM_DESCARGA, viagem.fimDescarga)
			.map(FIM_VIAGEM, viagem.fimViagem)
			.map(DESPESA_DESCARGA, viagem.despesaDescarga)
			.map(STATUS_CUSTO_DESCARGA, viagem.statusCustoDescarga)
			.map(MOTIVO_NEGATIVA_DESCARGA, viagem.motivoNegativaDescarga)
			.map(STATUS_DIARIA, viagem.statusDiaria)
			.map(MOTIVO_NEGATIVA_DIARIA, viagem.motivoNegativaDiaria)
			.map(DEVOLUCAO, viagem.devolucao)
			.map(OBSERVACAO_CALL_CENTER, viagem.observacaoCallCenter)
			.map(USUARIO_CALL_CENTER, viagem.usuarioCallCenter)
			.map(CHEGADA_LOGISTICA_REVERSA, viagem.chegadaLogisticaReversa)
			.map(AGENDA_REVERSA, viagem.agendaReversa)
			.map(MOTORISTA_REVERSA, viagem.motoristaReversa)
			.map(CAVALO_REVERSA, viagem.cavaloReversa)
			.map(CARRETA_REVERSA_1, viagem.carretaReversa1)
			.map(CARRETA_REVERSA_2, viagem.carretaReversa2)
			.map(FIM_LOGISTICA_REVERSA, viagem.fimLogisticaReversa)
			.map(OBSERVACAO_REVERSA, viagem.observacaoReversa)
			.map(USUARIO_LOGISTICA_REVERSA, viagem.usuarioLogisticaReversa)
			.map(MODIFIED_BY, viagem.modifiedBy)
			.map(CREATED_DATE, viagem.createdDate)
			.map(CREATED_BY, viagem.createdBy)
			.map(MODIFIED_DATE, viagem.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, viagem);
    }
    
}
