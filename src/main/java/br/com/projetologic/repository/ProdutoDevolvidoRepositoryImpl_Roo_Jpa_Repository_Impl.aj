// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.repository;

import br.com.projetologic.model.ProdutoDevolvido;
import br.com.projetologic.model.QProdutoDevolvido;
import br.com.projetologic.model.Viagem;
import br.com.projetologic.repository.ProdutoDevolvidoRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ProdutoDevolvidoRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ProdutoDevolvidoRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProdutoDevolvidoRepositoryImpl.NOTA_FISCAL_ORIGEM = "notaFiscalOrigem";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProdutoDevolvidoRepositoryImpl.QUANTIDADE = "quantidade";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProdutoDevolvidoRepositoryImpl.DESCRICAO = "descricao";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProdutoDevolvidoRepositoryImpl.REFERENCIA = "referencia";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProdutoDevolvidoRepositoryImpl.NOTA_FISCAL_DEVOLUCAO = "notaFiscalDevolucao";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProdutoDevolvidoRepositoryImpl.VIAGEM = "viagem";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProdutoDevolvidoRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProdutoDevolvidoRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProdutoDevolvidoRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProdutoDevolvidoRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ProdutoDevolvido> ProdutoDevolvidoRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QProdutoDevolvido produtoDevolvido = QProdutoDevolvido.produtoDevolvido;
        
        JPQLQuery<ProdutoDevolvido> query = from(produtoDevolvido);
        
        Path<?>[] paths = new Path<?>[] {produtoDevolvido.notaFiscalOrigem,produtoDevolvido.quantidade,produtoDevolvido.descricao,produtoDevolvido.referencia,produtoDevolvido.notaFiscalDevolucao,produtoDevolvido.viagem,produtoDevolvido.createdDate,produtoDevolvido.createdBy,produtoDevolvido.modifiedDate,produtoDevolvido.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOTA_FISCAL_ORIGEM, produtoDevolvido.notaFiscalOrigem)
			.map(QUANTIDADE, produtoDevolvido.quantidade)
			.map(DESCRICAO, produtoDevolvido.descricao)
			.map(REFERENCIA, produtoDevolvido.referencia)
			.map(NOTA_FISCAL_DEVOLUCAO, produtoDevolvido.notaFiscalDevolucao)
			.map(VIAGEM, produtoDevolvido.viagem)
			.map(CREATED_DATE, produtoDevolvido.createdDate)
			.map(CREATED_BY, produtoDevolvido.createdBy)
			.map(MODIFIED_DATE, produtoDevolvido.modifiedDate)
			.map(MODIFIED_BY, produtoDevolvido.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, produtoDevolvido);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ProdutoDevolvido> ProdutoDevolvidoRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QProdutoDevolvido produtoDevolvido = QProdutoDevolvido.produtoDevolvido;
        
        JPQLQuery<ProdutoDevolvido> query = from(produtoDevolvido);
        
        Path<?>[] paths = new Path<?>[] {produtoDevolvido.notaFiscalOrigem,produtoDevolvido.quantidade,produtoDevolvido.descricao,produtoDevolvido.referencia,produtoDevolvido.notaFiscalDevolucao,produtoDevolvido.viagem,produtoDevolvido.createdDate,produtoDevolvido.createdBy,produtoDevolvido.modifiedDate,produtoDevolvido.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(produtoDevolvido.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOTA_FISCAL_ORIGEM, produtoDevolvido.notaFiscalOrigem)
			.map(QUANTIDADE, produtoDevolvido.quantidade)
			.map(DESCRICAO, produtoDevolvido.descricao)
			.map(REFERENCIA, produtoDevolvido.referencia)
			.map(NOTA_FISCAL_DEVOLUCAO, produtoDevolvido.notaFiscalDevolucao)
			.map(VIAGEM, produtoDevolvido.viagem)
			.map(CREATED_DATE, produtoDevolvido.createdDate)
			.map(CREATED_BY, produtoDevolvido.createdBy)
			.map(MODIFIED_DATE, produtoDevolvido.modifiedDate)
			.map(MODIFIED_BY, produtoDevolvido.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, produtoDevolvido);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ProdutoDevolvido> ProdutoDevolvidoRepositoryImpl.findByViagem(Viagem viagem, GlobalSearch globalSearch, Pageable pageable) {
        
        QProdutoDevolvido produtoDevolvido = QProdutoDevolvido.produtoDevolvido;
        
        JPQLQuery<ProdutoDevolvido> query = from(produtoDevolvido);
        
        Assert.notNull(viagem, "viagem is required");
        
        query.where(produtoDevolvido.viagem.eq(viagem));
        Path<?>[] paths = new Path<?>[] {produtoDevolvido.notaFiscalOrigem,produtoDevolvido.quantidade,produtoDevolvido.descricao,produtoDevolvido.referencia,produtoDevolvido.notaFiscalDevolucao,produtoDevolvido.viagem,produtoDevolvido.createdDate,produtoDevolvido.createdBy,produtoDevolvido.modifiedDate,produtoDevolvido.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOTA_FISCAL_ORIGEM, produtoDevolvido.notaFiscalOrigem)
			.map(QUANTIDADE, produtoDevolvido.quantidade)
			.map(DESCRICAO, produtoDevolvido.descricao)
			.map(REFERENCIA, produtoDevolvido.referencia)
			.map(NOTA_FISCAL_DEVOLUCAO, produtoDevolvido.notaFiscalDevolucao)
			.map(VIAGEM, produtoDevolvido.viagem)
			.map(CREATED_DATE, produtoDevolvido.createdDate)
			.map(CREATED_BY, produtoDevolvido.createdBy)
			.map(MODIFIED_DATE, produtoDevolvido.modifiedDate)
			.map(MODIFIED_BY, produtoDevolvido.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, produtoDevolvido);
    }
    
}
