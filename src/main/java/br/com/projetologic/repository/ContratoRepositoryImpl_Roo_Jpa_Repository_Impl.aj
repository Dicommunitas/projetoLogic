// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.repository;

import br.com.projetologic.model.Contrato;
import br.com.projetologic.model.Embarcador;
import br.com.projetologic.model.QContrato;
import br.com.projetologic.repository.ContratoRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ContratoRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ContratoRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContratoRepositoryImpl.CONTRATANTE = "contratante";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContratoRepositoryImpl.VIGENCIA_INICIO = "vigenciaInicio";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContratoRepositoryImpl.VIGENCIA_FIM = "vigenciaFim";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContratoRepositoryImpl.VALOR_DIARIA = "valorDiaria";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContratoRepositoryImpl.VALOR_DESCARGA = "valorDescarga";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContratoRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContratoRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContratoRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContratoRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contrato> ContratoRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QContrato contrato = QContrato.contrato;
        
        JPQLQuery<Contrato> query = from(contrato);
        
        Path<?>[] paths = new Path<?>[] {contrato.contratante,contrato.vigenciaInicio,contrato.vigenciaFim,contrato.valorDiaria,contrato.valorDescarga,contrato.createdDate,contrato.createdBy,contrato.modifiedDate,contrato.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CONTRATANTE, contrato.contratante)
			.map(VIGENCIA_INICIO, contrato.vigenciaInicio)
			.map(VIGENCIA_FIM, contrato.vigenciaFim)
			.map(VALOR_DIARIA, contrato.valorDiaria)
			.map(VALOR_DESCARGA, contrato.valorDescarga)
			.map(CREATED_DATE, contrato.createdDate)
			.map(CREATED_BY, contrato.createdBy)
			.map(MODIFIED_DATE, contrato.modifiedDate)
			.map(MODIFIED_BY, contrato.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, contrato);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contrato> ContratoRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QContrato contrato = QContrato.contrato;
        
        JPQLQuery<Contrato> query = from(contrato);
        
        Path<?>[] paths = new Path<?>[] {contrato.contratante,contrato.vigenciaInicio,contrato.vigenciaFim,contrato.valorDiaria,contrato.valorDescarga,contrato.createdDate,contrato.createdBy,contrato.modifiedDate,contrato.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(contrato.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CONTRATANTE, contrato.contratante)
			.map(VIGENCIA_INICIO, contrato.vigenciaInicio)
			.map(VIGENCIA_FIM, contrato.vigenciaFim)
			.map(VALOR_DIARIA, contrato.valorDiaria)
			.map(VALOR_DESCARGA, contrato.valorDescarga)
			.map(CREATED_DATE, contrato.createdDate)
			.map(CREATED_BY, contrato.createdBy)
			.map(MODIFIED_DATE, contrato.modifiedDate)
			.map(MODIFIED_BY, contrato.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, contrato);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contratante
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contrato> ContratoRepositoryImpl.findByContratante(Embarcador contratante, GlobalSearch globalSearch, Pageable pageable) {
        
        QContrato contrato = QContrato.contrato;
        
        JPQLQuery<Contrato> query = from(contrato);
        
        Assert.notNull(contratante, "contratante is required");
        
        query.where(contrato.contratante.eq(contratante));
        Path<?>[] paths = new Path<?>[] {contrato.contratante,contrato.vigenciaInicio,contrato.vigenciaFim,contrato.valorDiaria,contrato.valorDescarga,contrato.createdDate,contrato.createdBy,contrato.modifiedDate,contrato.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CONTRATANTE, contrato.contratante)
			.map(VIGENCIA_INICIO, contrato.vigenciaInicio)
			.map(VIGENCIA_FIM, contrato.vigenciaFim)
			.map(VALOR_DIARIA, contrato.valorDiaria)
			.map(VALOR_DESCARGA, contrato.valorDescarga)
			.map(CREATED_DATE, contrato.createdDate)
			.map(CREATED_BY, contrato.createdBy)
			.map(MODIFIED_DATE, contrato.modifiedDate)
			.map(MODIFIED_BY, contrato.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, contrato);
    }
    
}
