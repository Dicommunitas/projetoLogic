// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.repository;

import br.com.projetologic.model.ModeloConjunto;
import br.com.projetologic.model.ModeloVeiculo;
import br.com.projetologic.model.QVeiculo;
import br.com.projetologic.model.Veiculo;
import br.com.projetologic.repository.VeiculoRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect VeiculoRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: VeiculoRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VeiculoRepositoryImpl.TIPO = "tipo";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VeiculoRepositoryImpl.PLACA = "placa";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VeiculoRepositoryImpl.MODELO_VEICULO = "modeloVeiculo";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VeiculoRepositoryImpl.PROPRIETARIO = "proprietario";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VeiculoRepositoryImpl.ATIVO = "ativo";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VeiculoRepositoryImpl.MODELO_CONJUNTO = "modeloConjunto";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VeiculoRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VeiculoRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VeiculoRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VeiculoRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Veiculo> VeiculoRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QVeiculo veiculo = QVeiculo.veiculo;
        
        JPQLQuery<Veiculo> query = from(veiculo);
        
        Path<?>[] paths = new Path<?>[] {veiculo.tipo,veiculo.placa,veiculo.modeloVeiculo,veiculo.proprietario,veiculo.ativo,veiculo.modeloConjunto,veiculo.createdDate,veiculo.createdBy,veiculo.modifiedDate,veiculo.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TIPO, veiculo.tipo)
			.map(PLACA, veiculo.placa)
			.map(MODELO_VEICULO, veiculo.modeloVeiculo)
			.map(PROPRIETARIO, veiculo.proprietario)
			.map(ATIVO, veiculo.ativo)
			.map(MODELO_CONJUNTO, veiculo.modeloConjunto)
			.map(CREATED_DATE, veiculo.createdDate)
			.map(CREATED_BY, veiculo.createdBy)
			.map(MODIFIED_DATE, veiculo.modifiedDate)
			.map(MODIFIED_BY, veiculo.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, veiculo);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Veiculo> VeiculoRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QVeiculo veiculo = QVeiculo.veiculo;
        
        JPQLQuery<Veiculo> query = from(veiculo);
        
        Path<?>[] paths = new Path<?>[] {veiculo.tipo,veiculo.placa,veiculo.modeloVeiculo,veiculo.proprietario,veiculo.ativo,veiculo.modeloConjunto,veiculo.createdDate,veiculo.createdBy,veiculo.modifiedDate,veiculo.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(veiculo.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TIPO, veiculo.tipo)
			.map(PLACA, veiculo.placa)
			.map(MODELO_VEICULO, veiculo.modeloVeiculo)
			.map(PROPRIETARIO, veiculo.proprietario)
			.map(ATIVO, veiculo.ativo)
			.map(MODELO_CONJUNTO, veiculo.modeloConjunto)
			.map(CREATED_DATE, veiculo.createdDate)
			.map(CREATED_BY, veiculo.createdBy)
			.map(MODIFIED_DATE, veiculo.modifiedDate)
			.map(MODIFIED_BY, veiculo.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, veiculo);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param modeloConjunto
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Veiculo> VeiculoRepositoryImpl.findByModeloConjunto(ModeloConjunto modeloConjunto, GlobalSearch globalSearch, Pageable pageable) {
        
        QVeiculo veiculo = QVeiculo.veiculo;
        
        JPQLQuery<Veiculo> query = from(veiculo);
        
        Assert.notNull(modeloConjunto, "modeloConjunto is required");
        
        query.where(veiculo.modeloConjunto.eq(modeloConjunto));
        Path<?>[] paths = new Path<?>[] {veiculo.tipo,veiculo.placa,veiculo.modeloVeiculo,veiculo.proprietario,veiculo.ativo,veiculo.modeloConjunto,veiculo.createdDate,veiculo.createdBy,veiculo.modifiedDate,veiculo.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TIPO, veiculo.tipo)
			.map(PLACA, veiculo.placa)
			.map(MODELO_VEICULO, veiculo.modeloVeiculo)
			.map(PROPRIETARIO, veiculo.proprietario)
			.map(ATIVO, veiculo.ativo)
			.map(MODELO_CONJUNTO, veiculo.modeloConjunto)
			.map(CREATED_DATE, veiculo.createdDate)
			.map(CREATED_BY, veiculo.createdBy)
			.map(MODIFIED_DATE, veiculo.modifiedDate)
			.map(MODIFIED_BY, veiculo.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, veiculo);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param modeloVeiculo
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Veiculo> VeiculoRepositoryImpl.findByModeloVeiculo(ModeloVeiculo modeloVeiculo, GlobalSearch globalSearch, Pageable pageable) {
        
        QVeiculo veiculo = QVeiculo.veiculo;
        
        JPQLQuery<Veiculo> query = from(veiculo);
        
        Assert.notNull(modeloVeiculo, "modeloVeiculo is required");
        
        query.where(veiculo.modeloVeiculo.eq(modeloVeiculo));
        Path<?>[] paths = new Path<?>[] {veiculo.tipo,veiculo.placa,veiculo.modeloVeiculo,veiculo.proprietario,veiculo.ativo,veiculo.modeloConjunto,veiculo.createdDate,veiculo.createdBy,veiculo.modifiedDate,veiculo.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TIPO, veiculo.tipo)
			.map(PLACA, veiculo.placa)
			.map(MODELO_VEICULO, veiculo.modeloVeiculo)
			.map(PROPRIETARIO, veiculo.proprietario)
			.map(ATIVO, veiculo.ativo)
			.map(MODELO_CONJUNTO, veiculo.modeloConjunto)
			.map(CREATED_DATE, veiculo.createdDate)
			.map(CREATED_BY, veiculo.createdBy)
			.map(MODIFIED_DATE, veiculo.modifiedDate)
			.map(MODIFIED_BY, veiculo.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, veiculo);
    }
    
}
