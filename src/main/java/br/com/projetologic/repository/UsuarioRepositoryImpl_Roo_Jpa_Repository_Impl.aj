// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.repository;

import br.com.projetologic.model.QUsuario;
import br.com.projetologic.model.Usuario;
import br.com.projetologic.repository.UsuarioRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UsuarioRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: UsuarioRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.NOME = "nome";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.LOGIN = "login";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.SENHA = "senha";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.CONFIRMA_SENHA = "confirmaSenha";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.CPF = "cpf";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QUsuario usuario = QUsuario.usuario;
        
        JPQLQuery<Usuario> query = from(usuario);
        
        Path<?>[] paths = new Path<?>[] {usuario.nome,usuario.login,usuario.senha,usuario.confirmaSenha,usuario.cpf,usuario.modifiedBy,usuario.createdDate,usuario.createdBy,usuario.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOME, usuario.nome)
			.map(LOGIN, usuario.login)
			.map(SENHA, usuario.senha)
			.map(CONFIRMA_SENHA, usuario.confirmaSenha)
			.map(CPF, usuario.cpf)
			.map(MODIFIED_BY, usuario.modifiedBy)
			.map(CREATED_DATE, usuario.createdDate)
			.map(CREATED_BY, usuario.createdBy)
			.map(MODIFIED_DATE, usuario.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QUsuario usuario = QUsuario.usuario;
        
        JPQLQuery<Usuario> query = from(usuario);
        
        Path<?>[] paths = new Path<?>[] {usuario.nome,usuario.login,usuario.senha,usuario.confirmaSenha,usuario.cpf,usuario.modifiedBy,usuario.createdDate,usuario.createdBy,usuario.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(usuario.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOME, usuario.nome)
			.map(LOGIN, usuario.login)
			.map(SENHA, usuario.senha)
			.map(CONFIRMA_SENHA, usuario.confirmaSenha)
			.map(CPF, usuario.cpf)
			.map(MODIFIED_BY, usuario.modifiedBy)
			.map(CREATED_DATE, usuario.createdDate)
			.map(CREATED_BY, usuario.createdBy)
			.map(MODIFIED_DATE, usuario.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, usuario);
    }
    
}
