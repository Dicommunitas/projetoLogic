// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.repository;

import br.com.projetologic.model.MotivoNegativaDescarga;
import br.com.projetologic.model.QMotivoNegativaDescarga;
import br.com.projetologic.repository.MotivoNegativaDescargaRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MotivoNegativaDescargaRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: MotivoNegativaDescargaRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MotivoNegativaDescargaRepositoryImpl.DESCRICAO = "descricao";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MotivoNegativaDescargaRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MotivoNegativaDescargaRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MotivoNegativaDescargaRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MotivoNegativaDescargaRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<MotivoNegativaDescarga> MotivoNegativaDescargaRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QMotivoNegativaDescarga motivoNegativaDescarga = QMotivoNegativaDescarga.motivoNegativaDescarga;
        
        JPQLQuery<MotivoNegativaDescarga> query = from(motivoNegativaDescarga);
        
        Path<?>[] paths = new Path<?>[] {motivoNegativaDescarga.descricao,motivoNegativaDescarga.createdDate,motivoNegativaDescarga.createdBy,motivoNegativaDescarga.modifiedDate,motivoNegativaDescarga.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRICAO, motivoNegativaDescarga.descricao)
			.map(CREATED_DATE, motivoNegativaDescarga.createdDate)
			.map(CREATED_BY, motivoNegativaDescarga.createdBy)
			.map(MODIFIED_DATE, motivoNegativaDescarga.modifiedDate)
			.map(MODIFIED_BY, motivoNegativaDescarga.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, motivoNegativaDescarga);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<MotivoNegativaDescarga> MotivoNegativaDescargaRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QMotivoNegativaDescarga motivoNegativaDescarga = QMotivoNegativaDescarga.motivoNegativaDescarga;
        
        JPQLQuery<MotivoNegativaDescarga> query = from(motivoNegativaDescarga);
        
        Path<?>[] paths = new Path<?>[] {motivoNegativaDescarga.descricao,motivoNegativaDescarga.createdDate,motivoNegativaDescarga.createdBy,motivoNegativaDescarga.modifiedDate,motivoNegativaDescarga.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(motivoNegativaDescarga.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRICAO, motivoNegativaDescarga.descricao)
			.map(CREATED_DATE, motivoNegativaDescarga.createdDate)
			.map(CREATED_BY, motivoNegativaDescarga.createdBy)
			.map(MODIFIED_DATE, motivoNegativaDescarga.modifiedDate)
			.map(MODIFIED_BY, motivoNegativaDescarga.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, motivoNegativaDescarga);
    }
    
}
