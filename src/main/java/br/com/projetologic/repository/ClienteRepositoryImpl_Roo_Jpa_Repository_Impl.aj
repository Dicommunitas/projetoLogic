// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.repository;

import br.com.projetologic.model.Cidade;
import br.com.projetologic.model.Cliente;
import br.com.projetologic.model.QCliente;
import br.com.projetologic.repository.ClienteRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ClienteRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ClienteRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.CNPJ = "cnpj";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.NOME = "nome";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.RUA = "rua";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.NUMERO = "numero";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.BAIRRO = "bairro";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.CIDADE = "cidade";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ClienteRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Cliente> ClienteRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCliente cliente = QCliente.cliente;
        
        JPQLQuery<Cliente> query = from(cliente);
        
        Path<?>[] paths = new Path<?>[] {cliente.cnpj,cliente.nome,cliente.rua,cliente.numero,cliente.bairro,cliente.cidade,cliente.createdDate,cliente.createdBy,cliente.modifiedDate,cliente.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CNPJ, cliente.cnpj)
			.map(NOME, cliente.nome)
			.map(RUA, cliente.rua)
			.map(NUMERO, cliente.numero)
			.map(BAIRRO, cliente.bairro)
			.map(CIDADE, cliente.cidade)
			.map(CREATED_DATE, cliente.createdDate)
			.map(CREATED_BY, cliente.createdBy)
			.map(MODIFIED_DATE, cliente.modifiedDate)
			.map(MODIFIED_BY, cliente.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, cliente);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Cliente> ClienteRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QCliente cliente = QCliente.cliente;
        
        JPQLQuery<Cliente> query = from(cliente);
        
        Path<?>[] paths = new Path<?>[] {cliente.cnpj,cliente.nome,cliente.rua,cliente.numero,cliente.bairro,cliente.cidade,cliente.createdDate,cliente.createdBy,cliente.modifiedDate,cliente.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(cliente.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CNPJ, cliente.cnpj)
			.map(NOME, cliente.nome)
			.map(RUA, cliente.rua)
			.map(NUMERO, cliente.numero)
			.map(BAIRRO, cliente.bairro)
			.map(CIDADE, cliente.cidade)
			.map(CREATED_DATE, cliente.createdDate)
			.map(CREATED_BY, cliente.createdBy)
			.map(MODIFIED_DATE, cliente.modifiedDate)
			.map(MODIFIED_BY, cliente.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, cliente);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cidade
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Cliente> ClienteRepositoryImpl.findByCidade(Cidade cidade, GlobalSearch globalSearch, Pageable pageable) {
        
        QCliente cliente = QCliente.cliente;
        
        JPQLQuery<Cliente> query = from(cliente);
        
        Assert.notNull(cidade, "cidade is required");
        
        query.where(cliente.cidade.eq(cidade));
        Path<?>[] paths = new Path<?>[] {cliente.cnpj,cliente.nome,cliente.rua,cliente.numero,cliente.bairro,cliente.cidade,cliente.createdDate,cliente.createdBy,cliente.modifiedDate,cliente.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CNPJ, cliente.cnpj)
			.map(NOME, cliente.nome)
			.map(RUA, cliente.rua)
			.map(NUMERO, cliente.numero)
			.map(BAIRRO, cliente.bairro)
			.map(CIDADE, cliente.cidade)
			.map(CREATED_DATE, cliente.createdDate)
			.map(CREATED_BY, cliente.createdBy)
			.map(MODIFIED_DATE, cliente.modifiedDate)
			.map(MODIFIED_BY, cliente.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, cliente);
    }
    
}
