// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.service.impl;

import br.com.projetologic.model.Cidade;
import br.com.projetologic.model.Cliente;
import br.com.projetologic.model.Embarcador;
import br.com.projetologic.model.MotivoNegativaDescarga;
import br.com.projetologic.model.MotivoNegativaDiaria;
import br.com.projetologic.model.MotivoPerdaAgenda;
import br.com.projetologic.model.Motorista;
import br.com.projetologic.model.ProdutoDevolvido;
import br.com.projetologic.model.Usuario;
import br.com.projetologic.model.Veiculo;
import br.com.projetologic.model.Viagem;
import br.com.projetologic.model.reference.StatusDevolucao;
import br.com.projetologic.repository.ViagemRepository;
import br.com.projetologic.service.api.ProdutoDevolvidoService;
import br.com.projetologic.service.impl.ViagemServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ViagemServiceImpl_Roo_Service_Impl {
    
    declare @type: ViagemServiceImpl: @Service;
    
    declare @type: ViagemServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ViagemRepository ViagemServiceImpl.viagemRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ProdutoDevolvidoService ViagemServiceImpl.produtoDevolvidoService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param viagemRepository
     * @param produtoDevolvidoService
     */
    @Autowired
    public ViagemServiceImpl.new(ViagemRepository viagemRepository, @Lazy ProdutoDevolvidoService produtoDevolvidoService) {
        setViagemRepository(viagemRepository);
        setProdutoDevolvidoService(produtoDevolvidoService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ViagemRepository
     */
    public ViagemRepository ViagemServiceImpl.getViagemRepository() {
        return viagemRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagemRepository
     */
    public void ViagemServiceImpl.setViagemRepository(ViagemRepository viagemRepository) {
        this.viagemRepository = viagemRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ProdutoDevolvidoService
     */
    public ProdutoDevolvidoService ViagemServiceImpl.getProdutoDevolvidoService() {
        return produtoDevolvidoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param produtoDevolvidoService
     */
    public void ViagemServiceImpl.setProdutoDevolvidoService(ProdutoDevolvidoService produtoDevolvidoService) {
        this.produtoDevolvidoService = produtoDevolvidoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagem
     * @param produtosDevolvidosToAdd
     * @return Viagem
     */
    @Transactional
    public Viagem ViagemServiceImpl.addToProdutosDevolvidos(Viagem viagem, Iterable<Long> produtosDevolvidosToAdd) {
        List<ProdutoDevolvido> produtosDevolvidos = getProdutoDevolvidoService().findAll(produtosDevolvidosToAdd);
        viagem.addToProdutosDevolvidos(produtosDevolvidos);
        return getViagemRepository().save(viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagem
     * @param produtosDevolvidosToRemove
     * @return Viagem
     */
    @Transactional
    public Viagem ViagemServiceImpl.removeFromProdutosDevolvidos(Viagem viagem, Iterable<Long> produtosDevolvidosToRemove) {
        List<ProdutoDevolvido> produtosDevolvidos = getProdutoDevolvidoService().findAll(produtosDevolvidosToRemove);
        viagem.removeFromProdutosDevolvidos(produtosDevolvidos);
        return getViagemRepository().save(viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagem
     * @param produtosDevolvidos
     * @return Viagem
     */
    @Transactional
    public Viagem ViagemServiceImpl.setProdutosDevolvidos(Viagem viagem, Iterable<Long> produtosDevolvidos) {
        List<ProdutoDevolvido> items = getProdutoDevolvidoService().findAll(produtosDevolvidos);
        Set<ProdutoDevolvido> currents = viagem.getProdutosDevolvidos();
        Set<ProdutoDevolvido> toRemove = new HashSet<ProdutoDevolvido>();
        for (Iterator<ProdutoDevolvido> iterator = currents.iterator(); iterator.hasNext();) {
            ProdutoDevolvido nextProdutoDevolvido = iterator.next();
            if (items.contains(nextProdutoDevolvido)) {
                items.remove(nextProdutoDevolvido);
            } else {
                toRemove.add(nextProdutoDevolvido);
            }
        }
        viagem.removeFromProdutosDevolvidos(toRemove);
        viagem.addToProdutosDevolvidos(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        viagem.setVersion(viagem.getVersion() + 1);
        return getViagemRepository().save(viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagem
     */
    @Transactional
    public void ViagemServiceImpl.delete(Viagem viagem) {
        // Clear bidirectional many-to-one child relationship with MotivoNegativaDescarga
        if (viagem.getMotivoNegativaDescarga() != null) {
            viagem.getMotivoNegativaDescarga().getViagem().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Embarcador
        if (viagem.getEmbarcador() != null) {
            viagem.getEmbarcador().getViagens().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Veiculo
        if (viagem.getCavalo() != null) {
            viagem.getCavalo().getViagensCavalo().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Veiculo
        if (viagem.getCarreta2() != null) {
            viagem.getCarreta2().getViagensCarreta2().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Veiculo
        if (viagem.getCarreta1() != null) {
            viagem.getCarreta1().getViagensCarreta1().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with MotivoPerdaAgenda
        if (viagem.getMotivoPerdaAgenda() != null) {
            viagem.getMotivoPerdaAgenda().getViagem().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Veiculo
        if (viagem.getCavaloReversa() != null) {
            viagem.getCavaloReversa().getViagensCavaloReversa().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Usuario
        if (viagem.getUsuarioExpedicao() != null) {
            viagem.getUsuarioExpedicao().getViagensExpedicao().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Motorista
        if (viagem.getMotorista() != null) {
            viagem.getMotorista().getViagem().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Usuario
        if (viagem.getUsuarioCallCenter() != null) {
            viagem.getUsuarioCallCenter().getViagensCallCenter().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Veiculo
        if (viagem.getCarretaReversa2() != null) {
            viagem.getCarretaReversa2().getViagensCarretaReversa2().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Usuario
        if (viagem.getUsuarioLogisticaReversa() != null) {
            viagem.getUsuarioLogisticaReversa().getViagensLogisticaReversa().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Veiculo
        if (viagem.getCarretaReversa1() != null) {
            viagem.getCarretaReversa1().getViagensCarretaReversa1().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Cliente
        if (viagem.getDestino() != null) {
            viagem.getDestino().getViagens().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with MotivoNegativaDiaria
        if (viagem.getMotivoNegativaDiaria() != null) {
            viagem.getMotivoNegativaDiaria().getViagem().remove(viagem);
        }
        
        // Clear bidirectional many-to-one child relationship with Cidade
        if (viagem.getCidadeOrigem() != null) {
            viagem.getCidadeOrigem().getViagens().remove(viagem);
        }
        
        // Clear bidirectional one-to-many parent relationship with ProdutoDevolvido
        for (ProdutoDevolvido item : viagem.getProdutosDevolvidos()) {
            item.setViagem(null);
        }
        
        getViagemRepository().delete(viagem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Viagem> ViagemServiceImpl.save(Iterable<Viagem> entities) {
        return getViagemRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void ViagemServiceImpl.delete(Iterable<Long> ids) {
        List<Viagem> toDelete = getViagemRepository().findAll(ids);
        getViagemRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Viagem
     */
    @Transactional
    public Viagem ViagemServiceImpl.save(Viagem entity) {
        return getViagemRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Viagem
     */
    public Viagem ViagemServiceImpl.findOne(Long id) {
        return getViagemRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Viagem
     */
    public Viagem ViagemServiceImpl.findOneForUpdate(Long id) {
        return getViagemRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Viagem> ViagemServiceImpl.findAll(Iterable<Long> ids) {
        return getViagemRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Viagem> ViagemServiceImpl.findAll() {
        return getViagemRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ViagemServiceImpl.count() {
        return getViagemRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carreta1
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByCarreta1(Veiculo carreta1, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByCarreta1(carreta1, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carreta2
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByCarreta2(Veiculo carreta2, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByCarreta2(carreta2, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carretaReversa1
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByCarretaReversa1(Veiculo carretaReversa1, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByCarretaReversa1(carretaReversa1, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carretaReversa2
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByCarretaReversa2(Veiculo carretaReversa2, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByCarretaReversa2(carretaReversa2, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cavalo
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByCavalo(Veiculo cavalo, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByCavalo(cavalo, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cavaloReversa
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByCavaloReversa(Veiculo cavaloReversa, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByCavaloReversa(cavaloReversa, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cidadeOrigem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByCidadeOrigem(Cidade cidadeOrigem, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByCidadeOrigem(cidadeOrigem, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param destino
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByDestino(Cliente destino, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByDestino(destino, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByEmbarcador(Embarcador embarcador, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByEmbarcador(embarcador, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDescarga
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByMotivoNegativaDescarga(MotivoNegativaDescarga motivoNegativaDescarga, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByMotivoNegativaDescarga(motivoNegativaDescarga, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDiaria
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByMotivoNegativaDiaria(MotivoNegativaDiaria motivoNegativaDiaria, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByMotivoNegativaDiaria(motivoNegativaDiaria, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoPerdaAgenda
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByMotivoPerdaAgenda(MotivoPerdaAgenda motivoPerdaAgenda, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByMotivoPerdaAgenda(motivoPerdaAgenda, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motorista
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByMotorista(Motorista motorista, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByMotorista(motorista, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioCallCenter
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByUsuarioCallCenter(Usuario usuarioCallCenter, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByUsuarioCallCenter(usuarioCallCenter, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioExpedicao
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByUsuarioExpedicao(Usuario usuarioExpedicao, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByUsuarioExpedicao(usuarioExpedicao, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioLogisticaReversa
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByUsuarioLogisticaReversa(Usuario usuarioLogisticaReversa, GlobalSearch globalSearch, Pageable pageable) {
        return getViagemRepository().findByUsuarioLogisticaReversa(usuarioLogisticaReversa, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carreta1
     * @return Long
     */
    public long ViagemServiceImpl.countByCarreta1(Veiculo carreta1) {
        return getViagemRepository().countByCarreta1(carreta1);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carreta2
     * @return Long
     */
    public long ViagemServiceImpl.countByCarreta2(Veiculo carreta2) {
        return getViagemRepository().countByCarreta2(carreta2);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carretaReversa1
     * @return Long
     */
    public long ViagemServiceImpl.countByCarretaReversa1(Veiculo carretaReversa1) {
        return getViagemRepository().countByCarretaReversa1(carretaReversa1);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param carretaReversa2
     * @return Long
     */
    public long ViagemServiceImpl.countByCarretaReversa2(Veiculo carretaReversa2) {
        return getViagemRepository().countByCarretaReversa2(carretaReversa2);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cavalo
     * @return Long
     */
    public long ViagemServiceImpl.countByCavalo(Veiculo cavalo) {
        return getViagemRepository().countByCavalo(cavalo);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cavaloReversa
     * @return Long
     */
    public long ViagemServiceImpl.countByCavaloReversa(Veiculo cavaloReversa) {
        return getViagemRepository().countByCavaloReversa(cavaloReversa);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cidadeOrigem
     * @return Long
     */
    public long ViagemServiceImpl.countByCidadeOrigem(Cidade cidadeOrigem) {
        return getViagemRepository().countByCidadeOrigem(cidadeOrigem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param destino
     * @return Long
     */
    public long ViagemServiceImpl.countByDestino(Cliente destino) {
        return getViagemRepository().countByDestino(destino);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @return Long
     */
    public long ViagemServiceImpl.countByEmbarcador(Embarcador embarcador) {
        return getViagemRepository().countByEmbarcador(embarcador);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDescarga
     * @return Long
     */
    public long ViagemServiceImpl.countByMotivoNegativaDescarga(MotivoNegativaDescarga motivoNegativaDescarga) {
        return getViagemRepository().countByMotivoNegativaDescarga(motivoNegativaDescarga);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDiaria
     * @return Long
     */
    public long ViagemServiceImpl.countByMotivoNegativaDiaria(MotivoNegativaDiaria motivoNegativaDiaria) {
        return getViagemRepository().countByMotivoNegativaDiaria(motivoNegativaDiaria);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoPerdaAgenda
     * @return Long
     */
    public long ViagemServiceImpl.countByMotivoPerdaAgenda(MotivoPerdaAgenda motivoPerdaAgenda) {
        return getViagemRepository().countByMotivoPerdaAgenda(motivoPerdaAgenda);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motorista
     * @return Long
     */
    public long ViagemServiceImpl.countByMotorista(Motorista motorista) {
        return getViagemRepository().countByMotorista(motorista);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioCallCenter
     * @return Long
     */
    public long ViagemServiceImpl.countByUsuarioCallCenter(Usuario usuarioCallCenter) {
        return getViagemRepository().countByUsuarioCallCenter(usuarioCallCenter);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioExpedicao
     * @return Long
     */
    public long ViagemServiceImpl.countByUsuarioExpedicao(Usuario usuarioExpedicao) {
        return getViagemRepository().countByUsuarioExpedicao(usuarioExpedicao);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioLogisticaReversa
     * @return Long
     */
    public long ViagemServiceImpl.countByUsuarioLogisticaReversa(Usuario usuarioLogisticaReversa) {
        return getViagemRepository().countByUsuarioLogisticaReversa(usuarioLogisticaReversa);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param inicioReal
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByInicioRealAfter(Calendar inicioReal, Pageable pageable) {
        return getViagemRepository().findByInicioRealAfter(inicioReal, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devolucao
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByDevolucaoEquals(StatusDevolucao devolucao, Pageable pageable) {
        return getViagemRepository().findByDevolucaoEquals(devolucao, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param pageable
     * @return Page
     */
    public Page<Viagem> ViagemServiceImpl.findByFimViagemNull(Pageable pageable) {
        return getViagemRepository().findByFimViagemNull(pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param inicioReal
     * @return Long
     */
    public long ViagemServiceImpl.countByInicioRealAfter(Calendar inicioReal) {
        return getViagemRepository().countByInicioRealAfter(inicioReal);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param devolucao
     * @return Long
     */
    public long ViagemServiceImpl.countByDevolucaoEquals(StatusDevolucao devolucao) {
        return getViagemRepository().countByDevolucaoEquals(devolucao);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ViagemServiceImpl.countByFimViagemNull() {
        return getViagemRepository().countByFimViagemNull();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Viagem> ViagemServiceImpl.getEntityType() {
        return Viagem.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> ViagemServiceImpl.getIdType() {
        return Long.class;
    }
    
}
