// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.service.impl;

import br.com.projetologic.model.Contrato;
import br.com.projetologic.model.Embarcador;
import br.com.projetologic.model.Viagem;
import br.com.projetologic.repository.EmbarcadorRepository;
import br.com.projetologic.service.api.ContratoService;
import br.com.projetologic.service.api.ViagemService;
import br.com.projetologic.service.impl.EmbarcadorServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EmbarcadorServiceImpl_Roo_Service_Impl {
    
    declare @type: EmbarcadorServiceImpl: @Service;
    
    declare @type: EmbarcadorServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private EmbarcadorRepository EmbarcadorServiceImpl.embarcadorRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ContratoService EmbarcadorServiceImpl.contratoService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ViagemService EmbarcadorServiceImpl.viagemService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param embarcadorRepository
     * @param contratoService
     * @param viagemService
     */
    @Autowired
    public EmbarcadorServiceImpl.new(EmbarcadorRepository embarcadorRepository, @Lazy ContratoService contratoService, @Lazy ViagemService viagemService) {
        setEmbarcadorRepository(embarcadorRepository);
        setContratoService(contratoService);
        setViagemService(viagemService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return EmbarcadorRepository
     */
    public EmbarcadorRepository EmbarcadorServiceImpl.getEmbarcadorRepository() {
        return embarcadorRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcadorRepository
     */
    public void EmbarcadorServiceImpl.setEmbarcadorRepository(EmbarcadorRepository embarcadorRepository) {
        this.embarcadorRepository = embarcadorRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ContratoService
     */
    public ContratoService EmbarcadorServiceImpl.getContratoService() {
        return contratoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contratoService
     */
    public void EmbarcadorServiceImpl.setContratoService(ContratoService contratoService) {
        this.contratoService = contratoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ViagemService
     */
    public ViagemService EmbarcadorServiceImpl.getViagemService() {
        return viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagemService
     */
    public void EmbarcadorServiceImpl.setViagemService(ViagemService viagemService) {
        this.viagemService = viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param contratosToAdd
     * @return Embarcador
     */
    @Transactional
    public Embarcador EmbarcadorServiceImpl.addToContratos(Embarcador embarcador, Iterable<Long> contratosToAdd) {
        List<Contrato> contratos = getContratoService().findAll(contratosToAdd);
        embarcador.addToContratos(contratos);
        return getEmbarcadorRepository().save(embarcador);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param viagensToAdd
     * @return Embarcador
     */
    @Transactional
    public Embarcador EmbarcadorServiceImpl.addToViagens(Embarcador embarcador, Iterable<Long> viagensToAdd) {
        List<Viagem> viagens = getViagemService().findAll(viagensToAdd);
        embarcador.addToViagens(viagens);
        return getEmbarcadorRepository().save(embarcador);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param contratosToRemove
     * @return Embarcador
     */
    @Transactional
    public Embarcador EmbarcadorServiceImpl.removeFromContratos(Embarcador embarcador, Iterable<Long> contratosToRemove) {
        List<Contrato> contratos = getContratoService().findAll(contratosToRemove);
        embarcador.removeFromContratos(contratos);
        return getEmbarcadorRepository().save(embarcador);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param viagensToRemove
     * @return Embarcador
     */
    @Transactional
    public Embarcador EmbarcadorServiceImpl.removeFromViagens(Embarcador embarcador, Iterable<Long> viagensToRemove) {
        List<Viagem> viagens = getViagemService().findAll(viagensToRemove);
        embarcador.removeFromViagens(viagens);
        return getEmbarcadorRepository().save(embarcador);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param contratos
     * @return Embarcador
     */
    @Transactional
    public Embarcador EmbarcadorServiceImpl.setContratos(Embarcador embarcador, Iterable<Long> contratos) {
        List<Contrato> items = getContratoService().findAll(contratos);
        Set<Contrato> currents = embarcador.getContratos();
        Set<Contrato> toRemove = new HashSet<Contrato>();
        for (Iterator<Contrato> iterator = currents.iterator(); iterator.hasNext();) {
            Contrato nextContrato = iterator.next();
            if (items.contains(nextContrato)) {
                items.remove(nextContrato);
            } else {
                toRemove.add(nextContrato);
            }
        }
        embarcador.removeFromContratos(toRemove);
        embarcador.addToContratos(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        embarcador.setVersion(embarcador.getVersion() + 1);
        return getEmbarcadorRepository().save(embarcador);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     * @param viagens
     * @return Embarcador
     */
    @Transactional
    public Embarcador EmbarcadorServiceImpl.setViagens(Embarcador embarcador, Iterable<Long> viagens) {
        List<Viagem> items = getViagemService().findAll(viagens);
        Set<Viagem> currents = embarcador.getViagens();
        Set<Viagem> toRemove = new HashSet<Viagem>();
        for (Iterator<Viagem> iterator = currents.iterator(); iterator.hasNext();) {
            Viagem nextViagem = iterator.next();
            if (items.contains(nextViagem)) {
                items.remove(nextViagem);
            } else {
                toRemove.add(nextViagem);
            }
        }
        embarcador.removeFromViagens(toRemove);
        embarcador.addToViagens(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        embarcador.setVersion(embarcador.getVersion() + 1);
        return getEmbarcadorRepository().save(embarcador);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param embarcador
     */
    @Transactional
    public void EmbarcadorServiceImpl.delete(Embarcador embarcador) {
        // Clear bidirectional one-to-many parent relationship with Contrato
        for (Contrato item : embarcador.getContratos()) {
            item.setContratante(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : embarcador.getViagens()) {
            item.setEmbarcador(null);
        }
        
        getEmbarcadorRepository().delete(embarcador);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Embarcador> EmbarcadorServiceImpl.save(Iterable<Embarcador> entities) {
        return getEmbarcadorRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void EmbarcadorServiceImpl.delete(Iterable<Long> ids) {
        List<Embarcador> toDelete = getEmbarcadorRepository().findAll(ids);
        getEmbarcadorRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Embarcador
     */
    @Transactional
    public Embarcador EmbarcadorServiceImpl.save(Embarcador entity) {
        return getEmbarcadorRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Embarcador
     */
    public Embarcador EmbarcadorServiceImpl.findOne(Long id) {
        return getEmbarcadorRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Embarcador
     */
    public Embarcador EmbarcadorServiceImpl.findOneForUpdate(Long id) {
        return getEmbarcadorRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Embarcador> EmbarcadorServiceImpl.findAll(Iterable<Long> ids) {
        return getEmbarcadorRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Embarcador> EmbarcadorServiceImpl.findAll() {
        return getEmbarcadorRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long EmbarcadorServiceImpl.count() {
        return getEmbarcadorRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Embarcador> EmbarcadorServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getEmbarcadorRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Embarcador> EmbarcadorServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getEmbarcadorRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cnpj
     * @param pageable
     * @return Page
     */
    public Page<Embarcador> EmbarcadorServiceImpl.findByCnpjEquals(String cnpj, Pageable pageable) {
        return getEmbarcadorRepository().findByCnpjEquals(cnpj, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cnpj
     * @return Long
     */
    public long EmbarcadorServiceImpl.countByCnpjEquals(String cnpj) {
        return getEmbarcadorRepository().countByCnpjEquals(cnpj);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Embarcador> EmbarcadorServiceImpl.getEntityType() {
        return Embarcador.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> EmbarcadorServiceImpl.getIdType() {
        return Long.class;
    }
    
}
