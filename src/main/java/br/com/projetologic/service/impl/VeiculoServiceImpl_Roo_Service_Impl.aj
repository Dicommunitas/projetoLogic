// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.service.impl;

import br.com.projetologic.model.ModeloConjunto;
import br.com.projetologic.model.ModeloVeiculo;
import br.com.projetologic.model.Veiculo;
import br.com.projetologic.model.Viagem;
import br.com.projetologic.repository.VeiculoRepository;
import br.com.projetologic.service.api.ViagemService;
import br.com.projetologic.service.impl.VeiculoServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect VeiculoServiceImpl_Roo_Service_Impl {
    
    declare @type: VeiculoServiceImpl: @Service;
    
    declare @type: VeiculoServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private VeiculoRepository VeiculoServiceImpl.veiculoRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ViagemService VeiculoServiceImpl.viagemService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param veiculoRepository
     * @param viagemService
     */
    @Autowired
    public VeiculoServiceImpl.new(VeiculoRepository veiculoRepository, @Lazy ViagemService viagemService) {
        setVeiculoRepository(veiculoRepository);
        setViagemService(viagemService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return VeiculoRepository
     */
    public VeiculoRepository VeiculoServiceImpl.getVeiculoRepository() {
        return veiculoRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param veiculoRepository
     */
    public void VeiculoServiceImpl.setVeiculoRepository(VeiculoRepository veiculoRepository) {
        this.veiculoRepository = veiculoRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ViagemService
     */
    public ViagemService VeiculoServiceImpl.getViagemService() {
        return viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagemService
     */
    public void VeiculoServiceImpl.setViagemService(ViagemService viagemService) {
        this.viagemService = viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param veiculo
     * @param ViagensCarreta1ToAdd
     * @return Veiculo
     */
    @Transactional
    public Veiculo VeiculoServiceImpl.addToViagensCarreta1(Veiculo veiculo, Iterable<Long> ViagensCarreta1ToAdd) {
        List<Viagem> ViagensCarreta1 = getViagemService().findAll(ViagensCarreta1ToAdd);
        veiculo.addToViagensCarreta1(ViagensCarreta1);
        return getVeiculoRepository().save(veiculo);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param veiculo
     * @param ViagensCarreta1ToRemove
     * @return Veiculo
     */
    @Transactional
    public Veiculo VeiculoServiceImpl.removeFromViagensCarreta1(Veiculo veiculo, Iterable<Long> ViagensCarreta1ToRemove) {
        List<Viagem> ViagensCarreta1 = getViagemService().findAll(ViagensCarreta1ToRemove);
        veiculo.removeFromViagensCarreta1(ViagensCarreta1);
        return getVeiculoRepository().save(veiculo);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param veiculo
     * @param ViagensCarreta1
     * @return Veiculo
     */
    @Transactional
    public Veiculo VeiculoServiceImpl.setViagensCarreta1(Veiculo veiculo, Iterable<Long> ViagensCarreta1) {
        List<Viagem> items = getViagemService().findAll(ViagensCarreta1);
        Set<Viagem> currents = veiculo.getViagensCarreta1();
        Set<Viagem> toRemove = new HashSet<Viagem>();
        for (Iterator<Viagem> iterator = currents.iterator(); iterator.hasNext();) {
            Viagem nextViagem = iterator.next();
            if (items.contains(nextViagem)) {
                items.remove(nextViagem);
            } else {
                toRemove.add(nextViagem);
            }
        }
        veiculo.removeFromViagensCarreta1(toRemove);
        veiculo.addToViagensCarreta1(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        veiculo.setVersion(veiculo.getVersion() + 1);
        return getVeiculoRepository().save(veiculo);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param veiculo
     */
    @Transactional
    public void VeiculoServiceImpl.delete(Veiculo veiculo) {
        // Clear bidirectional many-to-one child relationship with ModeloVeiculo
        if (veiculo.getModeloVeiculo() != null) {
            veiculo.getModeloVeiculo().getVeiculo().remove(veiculo);
        }
        
        // Clear bidirectional many-to-one child relationship with ModeloConjunto
        if (veiculo.getModeloConjunto() != null) {
            veiculo.getModeloConjunto().getVeiculo().remove(veiculo);
        }
        
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : veiculo.getViagensCarreta1()) {
            item.setCarreta1(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : veiculo.getViagensCarreta2()) {
            item.setCarreta2(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : veiculo.getViagensCarretaReversa1()) {
            item.setCarretaReversa1(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : veiculo.getViagensCarretaReversa2()) {
            item.setCarretaReversa2(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : veiculo.getViagensCavalo()) {
            item.setCavalo(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : veiculo.getViagensCavaloReversa()) {
            item.setCavaloReversa(null);
        }
        
        getVeiculoRepository().delete(veiculo);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Veiculo> VeiculoServiceImpl.save(Iterable<Veiculo> entities) {
        return getVeiculoRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void VeiculoServiceImpl.delete(Iterable<Long> ids) {
        List<Veiculo> toDelete = getVeiculoRepository().findAll(ids);
        getVeiculoRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Veiculo
     */
    @Transactional
    public Veiculo VeiculoServiceImpl.save(Veiculo entity) {
        return getVeiculoRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Veiculo
     */
    public Veiculo VeiculoServiceImpl.findOne(Long id) {
        return getVeiculoRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Veiculo
     */
    public Veiculo VeiculoServiceImpl.findOneForUpdate(Long id) {
        return getVeiculoRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Veiculo> VeiculoServiceImpl.findAll(Iterable<Long> ids) {
        return getVeiculoRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Veiculo> VeiculoServiceImpl.findAll() {
        return getVeiculoRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long VeiculoServiceImpl.count() {
        return getVeiculoRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Veiculo> VeiculoServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getVeiculoRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Veiculo> VeiculoServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getVeiculoRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param modeloConjunto
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Veiculo> VeiculoServiceImpl.findByModeloConjunto(ModeloConjunto modeloConjunto, GlobalSearch globalSearch, Pageable pageable) {
        return getVeiculoRepository().findByModeloConjunto(modeloConjunto, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param modeloVeiculo
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Veiculo> VeiculoServiceImpl.findByModeloVeiculo(ModeloVeiculo modeloVeiculo, GlobalSearch globalSearch, Pageable pageable) {
        return getVeiculoRepository().findByModeloVeiculo(modeloVeiculo, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param modeloConjunto
     * @return Long
     */
    public long VeiculoServiceImpl.countByModeloConjunto(ModeloConjunto modeloConjunto) {
        return getVeiculoRepository().countByModeloConjunto(modeloConjunto);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param modeloVeiculo
     * @return Long
     */
    public long VeiculoServiceImpl.countByModeloVeiculo(ModeloVeiculo modeloVeiculo) {
        return getVeiculoRepository().countByModeloVeiculo(modeloVeiculo);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Veiculo> VeiculoServiceImpl.getEntityType() {
        return Veiculo.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> VeiculoServiceImpl.getIdType() {
        return Long.class;
    }
    
}
