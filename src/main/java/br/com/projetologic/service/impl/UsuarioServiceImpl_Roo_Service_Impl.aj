// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.service.impl;

import br.com.projetologic.model.Regra;
import br.com.projetologic.model.Usuario;
import br.com.projetologic.model.Viagem;
import br.com.projetologic.repository.UsuarioRepository;
import br.com.projetologic.service.api.RegraService;
import br.com.projetologic.service.api.ViagemService;
import br.com.projetologic.service.impl.UsuarioServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UsuarioServiceImpl_Roo_Service_Impl {
    
    declare @type: UsuarioServiceImpl: @Service;
    
    declare @type: UsuarioServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private UsuarioRepository UsuarioServiceImpl.usuarioRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private RegraService UsuarioServiceImpl.regraService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ViagemService UsuarioServiceImpl.viagemService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param usuarioRepository
     * @param regraService
     * @param viagemService
     */
    @Autowired
    public UsuarioServiceImpl.new(UsuarioRepository usuarioRepository, @Lazy RegraService regraService, @Lazy ViagemService viagemService) {
        setUsuarioRepository(usuarioRepository);
        setRegraService(regraService);
        setViagemService(viagemService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return UsuarioRepository
     */
    public UsuarioRepository UsuarioServiceImpl.getUsuarioRepository() {
        return usuarioRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioRepository
     */
    public void UsuarioServiceImpl.setUsuarioRepository(UsuarioRepository usuarioRepository) {
        this.usuarioRepository = usuarioRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return RegraService
     */
    public RegraService UsuarioServiceImpl.getRegraService() {
        return regraService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param regraService
     */
    public void UsuarioServiceImpl.setRegraService(RegraService regraService) {
        this.regraService = regraService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ViagemService
     */
    public ViagemService UsuarioServiceImpl.getViagemService() {
        return viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagemService
     */
    public void UsuarioServiceImpl.setViagemService(ViagemService viagemService) {
        this.viagemService = viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param acessosToAdd
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.addToAcessos(Usuario usuario, Iterable<Long> acessosToAdd) {
        List<Regra> acessos = getRegraService().findAll(acessosToAdd);
        usuario.addToAcessos(acessos);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param viagensCallCenterToAdd
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.addToViagensCallCenter(Usuario usuario, Iterable<Long> viagensCallCenterToAdd) {
        List<Viagem> viagensCallCenter = getViagemService().findAll(viagensCallCenterToAdd);
        usuario.addToViagensCallCenter(viagensCallCenter);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param acessosToRemove
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.removeFromAcessos(Usuario usuario, Iterable<Long> acessosToRemove) {
        List<Regra> acessos = getRegraService().findAll(acessosToRemove);
        usuario.removeFromAcessos(acessos);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param viagensCallCenterToRemove
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.removeFromViagensCallCenter(Usuario usuario, Iterable<Long> viagensCallCenterToRemove) {
        List<Viagem> viagensCallCenter = getViagemService().findAll(viagensCallCenterToRemove);
        usuario.removeFromViagensCallCenter(viagensCallCenter);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param acessos
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.setAcessos(Usuario usuario, Iterable<Long> acessos) {
        List<Regra> items = getRegraService().findAll(acessos);
        Set<Regra> currents = usuario.getAcessos();
        Set<Regra> toRemove = new HashSet<Regra>();
        for (Iterator<Regra> iterator = currents.iterator(); iterator.hasNext();) {
            Regra nextRegra = iterator.next();
            if (items.contains(nextRegra)) {
                items.remove(nextRegra);
            } else {
                toRemove.add(nextRegra);
            }
        }
        usuario.removeFromAcessos(toRemove);
        usuario.addToAcessos(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        usuario.setVersion(usuario.getVersion() + 1);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param viagensCallCenter
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.setViagensCallCenter(Usuario usuario, Iterable<Long> viagensCallCenter) {
        List<Viagem> items = getViagemService().findAll(viagensCallCenter);
        Set<Viagem> currents = usuario.getViagensCallCenter();
        Set<Viagem> toRemove = new HashSet<Viagem>();
        for (Iterator<Viagem> iterator = currents.iterator(); iterator.hasNext();) {
            Viagem nextViagem = iterator.next();
            if (items.contains(nextViagem)) {
                items.remove(nextViagem);
            } else {
                toRemove.add(nextViagem);
            }
        }
        usuario.removeFromViagensCallCenter(toRemove);
        usuario.addToViagensCallCenter(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        usuario.setVersion(usuario.getVersion() + 1);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     */
    @Transactional
    public void UsuarioServiceImpl.delete(Usuario usuario) {
        // Clear bidirectional many-to-many parent relationship with Regra
        for (Regra item : usuario.getAcessos()) {
            item.getUsuarios().remove(usuario);
        }
        
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : usuario.getViagensCallCenter()) {
            item.setUsuarioCallCenter(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : usuario.getViagensExpedicao()) {
            item.setUsuarioExpedicao(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : usuario.getViagensLogisticaReversa()) {
            item.setUsuarioLogisticaReversa(null);
        }
        
        getUsuarioRepository().delete(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Usuario> UsuarioServiceImpl.save(Iterable<Usuario> entities) {
        return getUsuarioRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void UsuarioServiceImpl.delete(Iterable<Long> ids) {
        List<Usuario> toDelete = getUsuarioRepository().findAll(ids);
        getUsuarioRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.save(Usuario entity) {
        return getUsuarioRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Usuario
     */
    public Usuario UsuarioServiceImpl.findOne(Long id) {
        return getUsuarioRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Usuario
     */
    public Usuario UsuarioServiceImpl.findOneForUpdate(Long id) {
        return getUsuarioRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Usuario> UsuarioServiceImpl.findAll(Iterable<Long> ids) {
        return getUsuarioRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Usuario> UsuarioServiceImpl.findAll() {
        return getUsuarioRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long UsuarioServiceImpl.count() {
        return getUsuarioRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getUsuarioRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getUsuarioRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param login
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioServiceImpl.findByLogin(String login, Pageable pageable) {
        return getUsuarioRepository().findByLogin(login, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cpf
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioServiceImpl.findByCpfEquals(String cpf, Pageable pageable) {
        return getUsuarioRepository().findByCpfEquals(cpf, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param login
     * @return Long
     */
    public long UsuarioServiceImpl.countByLogin(String login) {
        return getUsuarioRepository().countByLogin(login);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param cpf
     * @return Long
     */
    public long UsuarioServiceImpl.countByCpfEquals(String cpf) {
        return getUsuarioRepository().countByCpfEquals(cpf);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Usuario> UsuarioServiceImpl.getEntityType() {
        return Usuario.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> UsuarioServiceImpl.getIdType() {
        return Long.class;
    }
    
}
