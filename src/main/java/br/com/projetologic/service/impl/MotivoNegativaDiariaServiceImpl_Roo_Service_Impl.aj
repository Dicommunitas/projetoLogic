// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.service.impl;

import br.com.projetologic.model.MotivoNegativaDiaria;
import br.com.projetologic.model.Viagem;
import br.com.projetologic.repository.MotivoNegativaDiariaRepository;
import br.com.projetologic.service.api.ViagemService;
import br.com.projetologic.service.impl.MotivoNegativaDiariaServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MotivoNegativaDiariaServiceImpl_Roo_Service_Impl {
    
    declare @type: MotivoNegativaDiariaServiceImpl: @Service;
    
    declare @type: MotivoNegativaDiariaServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MotivoNegativaDiariaRepository MotivoNegativaDiariaServiceImpl.motivoNegativaDiariaRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ViagemService MotivoNegativaDiariaServiceImpl.viagemService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param motivoNegativaDiariaRepository
     * @param viagemService
     */
    @Autowired
    public MotivoNegativaDiariaServiceImpl.new(MotivoNegativaDiariaRepository motivoNegativaDiariaRepository, @Lazy ViagemService viagemService) {
        setMotivoNegativaDiariaRepository(motivoNegativaDiariaRepository);
        setViagemService(viagemService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MotivoNegativaDiariaRepository
     */
    public MotivoNegativaDiariaRepository MotivoNegativaDiariaServiceImpl.getMotivoNegativaDiariaRepository() {
        return motivoNegativaDiariaRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDiariaRepository
     */
    public void MotivoNegativaDiariaServiceImpl.setMotivoNegativaDiariaRepository(MotivoNegativaDiariaRepository motivoNegativaDiariaRepository) {
        this.motivoNegativaDiariaRepository = motivoNegativaDiariaRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ViagemService
     */
    public ViagemService MotivoNegativaDiariaServiceImpl.getViagemService() {
        return viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagemService
     */
    public void MotivoNegativaDiariaServiceImpl.setViagemService(ViagemService viagemService) {
        this.viagemService = viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivonegativadiaria
     * @return Map
     */
    public Map<String, List<MessageI18n>> MotivoNegativaDiariaServiceImpl.validate(MotivoNegativaDiaria motivonegativadiaria) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDiaria
     * @param viagemToAdd
     * @return MotivoNegativaDiaria
     */
    @Transactional
    public MotivoNegativaDiaria MotivoNegativaDiariaServiceImpl.addToViagem(MotivoNegativaDiaria motivoNegativaDiaria, Iterable<Long> viagemToAdd) {
        List<Viagem> viagem = getViagemService().findAll(viagemToAdd);
        motivoNegativaDiaria.addToViagem(viagem);
        return getMotivoNegativaDiariaRepository().save(motivoNegativaDiaria);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDiaria
     * @param viagemToRemove
     * @return MotivoNegativaDiaria
     */
    @Transactional
    public MotivoNegativaDiaria MotivoNegativaDiariaServiceImpl.removeFromViagem(MotivoNegativaDiaria motivoNegativaDiaria, Iterable<Long> viagemToRemove) {
        List<Viagem> viagem = getViagemService().findAll(viagemToRemove);
        motivoNegativaDiaria.removeFromViagem(viagem);
        return getMotivoNegativaDiariaRepository().save(motivoNegativaDiaria);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDiaria
     * @param viagem
     * @return MotivoNegativaDiaria
     */
    @Transactional
    public MotivoNegativaDiaria MotivoNegativaDiariaServiceImpl.setViagem(MotivoNegativaDiaria motivoNegativaDiaria, Iterable<Long> viagem) {
        List<Viagem> items = getViagemService().findAll(viagem);
        Set<Viagem> currents = motivoNegativaDiaria.getViagem();
        Set<Viagem> toRemove = new HashSet<Viagem>();
        for (Iterator<Viagem> iterator = currents.iterator(); iterator.hasNext();) {
            Viagem nextViagem = iterator.next();
            if (items.contains(nextViagem)) {
                items.remove(nextViagem);
            } else {
                toRemove.add(nextViagem);
            }
        }
        motivoNegativaDiaria.removeFromViagem(toRemove);
        motivoNegativaDiaria.addToViagem(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        motivoNegativaDiaria.setVersion(motivoNegativaDiaria.getVersion() + 1);
        return getMotivoNegativaDiariaRepository().save(motivoNegativaDiaria);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motivoNegativaDiaria
     */
    @Transactional
    public void MotivoNegativaDiariaServiceImpl.delete(MotivoNegativaDiaria motivoNegativaDiaria) {
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : motivoNegativaDiaria.getViagem()) {
            item.setMotivoNegativaDiaria(null);
        }
        
        getMotivoNegativaDiariaRepository().delete(motivoNegativaDiaria);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<MotivoNegativaDiaria> MotivoNegativaDiariaServiceImpl.save(Iterable<MotivoNegativaDiaria> entities) {
        return getMotivoNegativaDiariaRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void MotivoNegativaDiariaServiceImpl.delete(Iterable<Long> ids) {
        List<MotivoNegativaDiaria> toDelete = getMotivoNegativaDiariaRepository().findAll(ids);
        getMotivoNegativaDiariaRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return MotivoNegativaDiaria
     */
    @Transactional
    public MotivoNegativaDiaria MotivoNegativaDiariaServiceImpl.save(MotivoNegativaDiaria entity) {
        return getMotivoNegativaDiariaRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return MotivoNegativaDiaria
     */
    public MotivoNegativaDiaria MotivoNegativaDiariaServiceImpl.findOne(Long id) {
        return getMotivoNegativaDiariaRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return MotivoNegativaDiaria
     */
    public MotivoNegativaDiaria MotivoNegativaDiariaServiceImpl.findOneForUpdate(Long id) {
        return getMotivoNegativaDiariaRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<MotivoNegativaDiaria> MotivoNegativaDiariaServiceImpl.findAll(Iterable<Long> ids) {
        return getMotivoNegativaDiariaRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<MotivoNegativaDiaria> MotivoNegativaDiariaServiceImpl.findAll() {
        return getMotivoNegativaDiariaRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long MotivoNegativaDiariaServiceImpl.count() {
        return getMotivoNegativaDiariaRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<MotivoNegativaDiaria> MotivoNegativaDiariaServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getMotivoNegativaDiariaRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<MotivoNegativaDiaria> MotivoNegativaDiariaServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getMotivoNegativaDiariaRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<MotivoNegativaDiaria> MotivoNegativaDiariaServiceImpl.getEntityType() {
        return MotivoNegativaDiaria.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> MotivoNegativaDiariaServiceImpl.getIdType() {
        return Long.class;
    }
    
}
