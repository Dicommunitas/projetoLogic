// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.projetologic.service.impl;

import br.com.projetologic.model.Motorista;
import br.com.projetologic.model.Viagem;
import br.com.projetologic.repository.MotoristaRepository;
import br.com.projetologic.service.api.ViagemService;
import br.com.projetologic.service.impl.MotoristaServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MotoristaServiceImpl_Roo_Service_Impl {
    
    declare @type: MotoristaServiceImpl: @Service;
    
    declare @type: MotoristaServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MotoristaRepository MotoristaServiceImpl.motoristaRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ViagemService MotoristaServiceImpl.viagemService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param motoristaRepository
     * @param viagemService
     */
    @Autowired
    public MotoristaServiceImpl.new(MotoristaRepository motoristaRepository, @Lazy ViagemService viagemService) {
        setMotoristaRepository(motoristaRepository);
        setViagemService(viagemService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MotoristaRepository
     */
    public MotoristaRepository MotoristaServiceImpl.getMotoristaRepository() {
        return motoristaRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motoristaRepository
     */
    public void MotoristaServiceImpl.setMotoristaRepository(MotoristaRepository motoristaRepository) {
        this.motoristaRepository = motoristaRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ViagemService
     */
    public ViagemService MotoristaServiceImpl.getViagemService() {
        return viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param viagemService
     */
    public void MotoristaServiceImpl.setViagemService(ViagemService viagemService) {
        this.viagemService = viagemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motorista
     * @param viagemToAdd
     * @return Motorista
     */
    @Transactional
    public Motorista MotoristaServiceImpl.addToViagem(Motorista motorista, Iterable<Long> viagemToAdd) {
        List<Viagem> viagem = getViagemService().findAll(viagemToAdd);
        motorista.addToViagem(viagem);
        return getMotoristaRepository().save(motorista);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motorista
     * @param viagemToRemove
     * @return Motorista
     */
    @Transactional
    public Motorista MotoristaServiceImpl.removeFromViagem(Motorista motorista, Iterable<Long> viagemToRemove) {
        List<Viagem> viagem = getViagemService().findAll(viagemToRemove);
        motorista.removeFromViagem(viagem);
        return getMotoristaRepository().save(motorista);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motorista
     * @param viagem
     * @return Motorista
     */
    @Transactional
    public Motorista MotoristaServiceImpl.setViagem(Motorista motorista, Iterable<Long> viagem) {
        List<Viagem> items = getViagemService().findAll(viagem);
        Set<Viagem> currents = motorista.getViagem();
        Set<Viagem> toRemove = new HashSet<Viagem>();
        for (Iterator<Viagem> iterator = currents.iterator(); iterator.hasNext();) {
            Viagem nextViagem = iterator.next();
            if (items.contains(nextViagem)) {
                items.remove(nextViagem);
            } else {
                toRemove.add(nextViagem);
            }
        }
        motorista.removeFromViagem(toRemove);
        motorista.addToViagem(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        motorista.setVersion(motorista.getVersion() + 1);
        return getMotoristaRepository().save(motorista);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param motorista
     */
    @Transactional
    public void MotoristaServiceImpl.delete(Motorista motorista) {
        // Clear bidirectional one-to-many parent relationship with Viagem
        for (Viagem item : motorista.getViagem()) {
            item.setMotorista(null);
        }
        
        getMotoristaRepository().delete(motorista);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Motorista> MotoristaServiceImpl.save(Iterable<Motorista> entities) {
        return getMotoristaRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void MotoristaServiceImpl.delete(Iterable<Long> ids) {
        List<Motorista> toDelete = getMotoristaRepository().findAll(ids);
        getMotoristaRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Motorista
     */
    @Transactional
    public Motorista MotoristaServiceImpl.save(Motorista entity) {
        return getMotoristaRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Motorista
     */
    public Motorista MotoristaServiceImpl.findOne(Long id) {
        return getMotoristaRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Motorista
     */
    public Motorista MotoristaServiceImpl.findOneForUpdate(Long id) {
        return getMotoristaRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Motorista> MotoristaServiceImpl.findAll(Iterable<Long> ids) {
        return getMotoristaRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Motorista> MotoristaServiceImpl.findAll() {
        return getMotoristaRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long MotoristaServiceImpl.count() {
        return getMotoristaRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Motorista> MotoristaServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getMotoristaRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Motorista> MotoristaServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getMotoristaRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Motorista> MotoristaServiceImpl.getEntityType() {
        return Motorista.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> MotoristaServiceImpl.getIdType() {
        return Long.class;
    }
    
}
